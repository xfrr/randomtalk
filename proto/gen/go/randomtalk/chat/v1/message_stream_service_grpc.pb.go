// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: randomtalk/chat/v1/message_stream_service.proto

package chatpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageStreamService_ReceiveMessages_FullMethodName = "/randomtalk.chat.v1.MessageStreamService/ReceiveMessages"
	MessageStreamService_SendMessage_FullMethodName     = "/randomtalk.chat.v1.MessageStreamService/SendMessage"
)

// MessageStreamServiceClient is the client API for MessageStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageStreamServiceClient interface {
	// Subscribes to a match session to receive messages until the stream is closed.
	ReceiveMessages(ctx context.Context, in *ReceiveMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReceiveMessagesResponse], error)
	// Sends a message to a match session.
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type messageStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageStreamServiceClient(cc grpc.ClientConnInterface) MessageStreamServiceClient {
	return &messageStreamServiceClient{cc}
}

func (c *messageStreamServiceClient) ReceiveMessages(ctx context.Context, in *ReceiveMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReceiveMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageStreamService_ServiceDesc.Streams[0], MessageStreamService_ReceiveMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReceiveMessagesRequest, ReceiveMessagesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageStreamService_ReceiveMessagesClient = grpc.ServerStreamingClient[ReceiveMessagesResponse]

func (c *messageStreamServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, MessageStreamService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageStreamServiceServer is the server API for MessageStreamService service.
// All implementations must embed UnimplementedMessageStreamServiceServer
// for forward compatibility.
type MessageStreamServiceServer interface {
	// Subscribes to a match session to receive messages until the stream is closed.
	ReceiveMessages(*ReceiveMessagesRequest, grpc.ServerStreamingServer[ReceiveMessagesResponse]) error
	// Sends a message to a match session.
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	mustEmbedUnimplementedMessageStreamServiceServer()
}

// UnimplementedMessageStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageStreamServiceServer struct{}

func (UnimplementedMessageStreamServiceServer) ReceiveMessages(*ReceiveMessagesRequest, grpc.ServerStreamingServer[ReceiveMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedMessageStreamServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageStreamServiceServer) mustEmbedUnimplementedMessageStreamServiceServer() {}
func (UnimplementedMessageStreamServiceServer) testEmbeddedByValue()                              {}

// UnsafeMessageStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageStreamServiceServer will
// result in compilation errors.
type UnsafeMessageStreamServiceServer interface {
	mustEmbedUnimplementedMessageStreamServiceServer()
}

func RegisterMessageStreamServiceServer(s grpc.ServiceRegistrar, srv MessageStreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedMessageStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageStreamService_ServiceDesc, srv)
}

func _MessageStreamService_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageStreamServiceServer).ReceiveMessages(m, &grpc.GenericServerStream[ReceiveMessagesRequest, ReceiveMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageStreamService_ReceiveMessagesServer = grpc.ServerStreamingServer[ReceiveMessagesResponse]

func _MessageStreamService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageStreamServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageStreamService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageStreamServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageStreamService_ServiceDesc is the grpc.ServiceDesc for MessageStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "randomtalk.chat.v1.MessageStreamService",
	HandlerType: (*MessageStreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessageStreamService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessages",
			Handler:       _MessageStreamService_ReceiveMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "randomtalk/chat/v1/message_stream_service.proto",
}
