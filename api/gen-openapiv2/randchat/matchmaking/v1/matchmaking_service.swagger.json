{
  "swagger": "2.0",
  "info": {
    "title": "Match  Service",
    "version": "v1",
    "contact": {
      "name": "xfrr",
      "url": "https://fromero.me",
      "email": "work@fromero.me"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/xfrr/randomtalk/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "MatchMakingService"
    }
  ],
  "host": "localhost:50500",
  "schemes": [
    "http",
    "https",
    "wss"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/matches": {
      "post": {
        "summary": "FindMatch tries to find a match for the user based on their preferences.",
        "operationId": "MatchMakingService_FindMatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1FindMatchResponse"
            }
          },
          "403": {
            "description": "Returned when the requester does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned when an internal server error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1FindMatchRequest"
            }
          }
        ],
        "tags": [
          "MatchMakingService"
        ],
        "security": []
      }
    },
    "/v1/matches/{matchId}": {
      "get": {
        "summary": "Retrieves a match details by its ID.",
        "operationId": "MatchMakingService_GetMatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMatchResponse"
            }
          },
          "403": {
            "description": "Returned when the requester does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "500": {
            "description": "Returned when an internal server error occurs.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "matchId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MatchMakingService"
        ],
        "security": []
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "randomtalkmatchmakingv1Gender": {
      "type": "string",
      "enum": [
        "GENDER_UNSPECIFIED",
        "GENDER_MALE",
        "GENDER_FEMALE"
      ],
      "default": "GENDER_UNSPECIFIED"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1FindMatchRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "userAge": {
          "type": "integer",
          "format": "int32"
        },
        "userGender": {
          "$ref": "#/definitions/randomtalkmatchmakingv1Gender"
        },
        "userLocation": {
          "$ref": "#/definitions/v1LatLng"
        },
        "matchPreferences": {
          "$ref": "#/definitions/v1MatchPreferences"
        }
      }
    },
    "v1FindMatchResponse": {
      "type": "object",
      "properties": {
        "matchId": {
          "type": "string"
        }
      }
    },
    "v1GetMatchResponse": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/v1Match"
        }
      }
    },
    "v1LatLng": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
        }
      }
    },
    "v1Match": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "participantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1MatchPreferences": {
      "type": "object",
      "properties": {
        "gender": {
          "$ref": "#/definitions/randomtalkmatchmakingv1Gender"
        },
        "minAge": {
          "type": "integer",
          "format": "int32"
        },
        "maxAge": {
          "type": "integer",
          "format": "int32"
        },
        "maxDistanceKm": {
          "type": "number",
          "format": "double"
        },
        "interests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxWaitTimeSeconds": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://example.com/oauth/authorize",
      "tokenUrl": "https://example.com/oauth/token",
      "scopes": {
        "read": "Grants read access"
      }
    }
  },
  "security": [
    {
      "OAuth2": []
    }
  ]
}
